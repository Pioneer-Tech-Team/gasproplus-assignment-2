// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        Int      @id @default(autoincrement())
  parent_id Int?     @default(0) // null if no parent
  is_group  Boolean
  name      String   @db.VarChar(60)

  parent   Account?  @relation("Parent", fields: [parent_id], references: [id])
  children Account[] @relation("Parent")
}
model Company {
  id   Int     @id @default(autoincrement())
  name String  @db.VarChar(60)

  vouchers Voucher[]
}

model VoucherType {
  id          Int        @id @default(autoincrement())
  shortForm   String     @unique @db.VarChar(4)
  name        String     @db.VarChar(32)
  drFilter    String?    @db.VarChar(1024)
  crFilter    String?    @db.VarChar(1024)
  relationship RelationshipEnum
  manyDr      Boolean
  manyCr      Boolean

  vouchers Voucher[]
}

model Voucher {
  id            Int          @id @default(autoincrement())
  voucherNo     Int          @unique
  voucherDate   DateTime
  amount        Decimal      @db.Decimal(15, 2)
  narration     String?      @db.VarChar(255)
  voucherTypeId Int
  companyId     Int?
  voucherType VoucherType @relation(fields: [voucherTypeId], references: [id])
  company     Company?    @relation(fields: [companyId], references: [id])
  details     VoucherDetail[]
}

model VoucherDetail {
  id        Int      @id @default(autoincrement())
  voucherId Int
  amount    Decimal  @db.Decimal(15, 2)
  drcr      Int      // 1 for Dr, -1 for Cr
  remark    String?  @db.VarChar(30)

  voucher Voucher @relation(fields: [voucherId], references: [id])
}

model VoucherNos {
  series  String  @id @db.VarChar(12)
  lastNo  Int
}

// Enum type for relationship
enum RelationshipEnum {
  one_to_one
  one_to_many
  many_to_one
  many_to_many
}
